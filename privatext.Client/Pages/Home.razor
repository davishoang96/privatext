@page "/"
@inject IApiClient ApiClient
@inject IRandomString RandomString
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using privatext.Client.Layout
@using privatext.Common.DTO
@using privatext.Common.Request
@using privatext.Services
@inject ICryptoService CryptService;

<PageTitle>privatext</PageTitle>
<MudSpacer />
<MudSpacer />

@if (@ShowTextInput)
{
    <MudStack>
        <h4 style="font-family: Consolas">New message</h4>
        <MudText>The message will be deleted as soon as it is read.</MudText>
        <MudTextField Style="font-family: Consolas" Variant="Variant.Outlined"
                      @bind-Value="@Content" Lines="10"
                      Placeholder="Enter your text message here..."
                      MaxLength="4000" FullWidth="true" />
        <MudButton OnClick="@CreateMessage"
                   Variant="Variant.Outlined"
                   Color="Color.Success">Create</MudButton>
    </MudStack>
}
else
{
    <MudStack>
        @if (@IsLoading)
        {
            <MudProgressCircular Indeterminate="true" />
        }
        else
        {
            <h6 style="font-family: Consolas">Link: </h6>
            <MudTextField Style="font-family: Consolas" Variant="Variant.Outlined" @bind-Value="@TextUrl" />
            <MudText Typo="Typo.h6">Your message</MudText>
            <MudTextField Lines="10" Style="font-family: Consolas" Variant="Variant.Outlined"
                          ReadOnly="true" @bind-Value="@Content" FullWidth="true" />
            <MudText Typo="Typo.caption">(you will only see this once)</MudText>
            <MudButton OnClick="@DeleteMessage" Variant="Variant.Outlined" Color="Color.Error">Delete</MudButton>
            <MudButton OnClick="@NewText" Variant="Variant.Outlined" Color="Color.Success">Create</MudButton>
        }
    </MudStack>
}

<style>
    .custom-font {
        font-family: 'Roboto', sans-serif;
    }
</style>

@code {

    private string Content { get; set; }
    private string TextUrl { get; set; }
    private bool ShowTextInput { get; set; }
    private string Id { get; set; }
    private bool IsLoading { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ShowTextInput = !ShowTextInput;
        IsLoading = false;
    }

    private void CopyToClipboard()
    {
        Snackbar.Add("Copied to clipboard", Severity.Success);
    }

    private async Task DeleteMessage()
    {
        if (string.IsNullOrEmpty(Id))
        {
            Snackbar.Add("Cannot delete the message", Severity.Error);
            return;
        }

        var res = await ApiClient.DeleteMessageEndpointAsync(new DeleteMessageRequest
        {
            MessageId = Id
        });

        if (res)
        {
            Snackbar.Add("Sucessfully deleted", Severity.Success);
        }

        NewText();
    }


    private async Task CreateMessage()
    {
        if(string.IsNullOrEmpty(Content))
        {
            Snackbar.Add("The input field cannot be empty", Severity.Warning);
            return;
        }

        ShowTextInput = false;
        IsLoading = true;

        var key = RandomString.Generate(32);
        var urlId = RandomString.Generate(4);
        var messageContent = await CryptService.Encrypt(Content, key);
        var clientKey = key.Substring(0, 9);
        var keyIdentifier = key.Substring(9);
        var result = await ApiClient.CreateMessageEndpointAsync(new CreateMessageRequest
        {
            MessageDTO = new MessageDTO
            {
                KeyIdentifer = keyIdentifier,
                MessageId = urlId,
                Content = messageContent,
            },
        });

        if(result)
        {
            Id = urlId;
            TextUrl = $"{NavigationManager.BaseUri}text/{urlId}${clientKey}";
            ShowTextInput = false;
            IsLoading = false;
            Snackbar.Add("Message saved!", Severity.Success);
        }
    }

    private void NewText()
    {
        Content = TextUrl = Id = string.Empty;
        ShowTextInput = true;
    }
}
