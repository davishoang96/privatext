@page "/"
@inject IApiClient ApiClient
@inject IRandomString RandomString
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@using privatext.Common.DTO
@using privatext.Common.Request
@using privatext.Services
@inject ICryptoService CryptService;

<PageTitle>Privatext</PageTitle>

<RadzenRow Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Gap="2rem">
    <RadzenColumn Size="3">
    </RadzenColumn>
    <RadzenColumn Size="6">
        <RadzenStack Orientation="Orientation.Vertical" Gap="2rem" JustifyContent="JustifyContent.Center">
            <RadzenStack Visible="@ShowTextInput" JustifyContent="JustifyContent.Center" Orientation="Orientation.Vertical" Gap="10px">
                <h4 class="custom-font">New message</h4>
                <p>The message will be deleted as soon as it is read.</p>
                <div>
                    <RadzenTextArea @bind-Value="@Content" Style="width: 100%" Placeholder="Enter your text message here..." MaxLength="4000" Rows="15" Cols="69" />
                </div>
                <RadzenButton Click="@CreateMessage" Text="Create" ButtonStyle="ButtonStyle.Success" />
            </RadzenStack>
            <RadzenStack Visible="@(!@ShowTextInput)" JustifyContent="JustifyContent.Center" Orientation="Orientation.Vertical" Gap="10px">
                <RadzenProgressBarCircular ShowValue="false" Visible="@IsLoading" Mode="ProgressBarMode.Indeterminate" />
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Link</RadzenText>
                <RadzenFormField Text="Share this link: ">
                    <ChildContent>
                        <RadzenTextBox @bind-Value="@TextUrl" />
                    </ChildContent>
                    <End>
                        <RadzenIcon Visible="true" Icon="done" IconStyle="IconStyle.Secondary" />
                    </End>
                </RadzenFormField>
                <RadzenText TextStyle="TextStyle.Subtitle2">Your message</RadzenText>
                <div>
                    <RadzenTextArea ReadOnly="true" Style="width: 100%" @bind-Value="@Content" MaxLength="4000" Rows="15" Cols="69" />
                </div>
                <RadzenText TextStyle="TextStyle.Caption">(you will only see this once)</RadzenText>
                <RadzenButton Click="@DeleteMessage" ButtonStyle="ButtonStyle.Danger">Delete</RadzenButton>
                <RadzenButton Click="@NewText" ButtonStyle="ButtonStyle.Success">Create</RadzenButton>
            </RadzenStack>
        </RadzenStack>
    </RadzenColumn>
    <RadzenColumn Size="3">
    </RadzenColumn>
</RadzenRow>

@code {

    private string Content { get; set; }
    private string TextUrl { get; set; }
    private bool ShowTextInput { get; set; }
    private string Id { get; set; }
    private bool IsLoading { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ShowTextInput = !ShowTextInput;
        IsLoading = false;
    }

    private async Task DeleteMessage()
    {
        if (string.IsNullOrEmpty(Id))
        {
            NotificationService.Notify(new NotificationMessage 
            { 
                Severity = NotificationSeverity.Error, 
                Summary = "Warning", 
                Detail = "Cannot delete the message",
            });

            return;
        }

        var res = await ApiClient.DeleteMessageEndpointAsync(new DeleteMessageRequest
        {
            MessageId = Id
        });

        if (res)
        {
            NewText();
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Status",
                Detail = "Private text successfully deleted",
            });
        }
    }


    private async Task CreateMessage()
    {
        if(string.IsNullOrEmpty(Content))
        {
            NotificationService.Notify(new NotificationMessage 
            { 
                Severity = NotificationSeverity.Error, 
                Summary = "Warning", 
                Detail = "Message cannot be empty",
            });

            return;
        }

        ShowTextInput = false;
        IsLoading = true;

        var key = RandomString.Generate(32);
        var urlId = RandomString.Generate(4);
        var messageContent = await CryptService.Encrypt(Content, key);
        var clientKey = key.Substring(0, 9);
        var keyIdentifier = key.Substring(9);
        var result = await ApiClient.CreateMessageEndpointAsync(new CreateMessageRequest
        {
            MessageDTO = new MessageDTO
            {
                KeyIdentifer = keyIdentifier,
                MessageId = urlId,
                Content = messageContent,
            },
        });

        if(result)
        {
            Id = urlId;
            TextUrl = $"{NavigationManager.BaseUri}text/{urlId}${clientKey}";
            ShowTextInput = false;
            IsLoading = false;
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Status",
                Detail = "Private text successfully created",
            });
        }
    }

    private void NewText()
    {
        Content = TextUrl = Id = string.Empty;
        ShowTextInput = true;
    }
}
