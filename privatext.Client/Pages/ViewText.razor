@page "/text/{id}"
@inject IApiClient ApiClient
@inject NavigationManager navigationService
@inject ICryptoService CryptService
@using Newtonsoft.Json
@using privatext.Client.Layout
@using privatext.Common.Response
@using privatext.Services

<MudSpacer />
<MudSpacer />

@if (IsLoading)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudStack Direction="Column" JustifyContent="Center">
        @if (ShowViewTextBtn)
        {
            <MudText Typo="Typo.h5">View the private text message</MudText>
            <MudText Typo="Typo.body1">The text will be automatically removed from the server once you view it.</MudText>
            <MudButton OnClick="@ExecuteViewText" Variant="Variant.Outlined" Color="Color.Primary">View Text</MudButton>
        }

                @if (IsTextViewed)
                {
                    <MudStack Direction="Column" JustifyContent="Center">
                        <MudText Typo="Typo.h5">Your text message</MudText>
                        <MudTextField Style="font-family: Consolas" Variant="Variant.Outlined" Lines="10" ReadOnly="true" Value="@Content" FullWidth="true" />
                        <MudButton OnClick="@GoHome" Variant="Variant.Outlined" Color="Color.Success">Create</MudButton>
                    </MudStack>
                }

        @if (ShowDeletedNotification)
        {
            <MudText Typo="Typo.body1">The message has been viewed and deleted</MudText>
            <MudButton OnClick="@GoHome" Variant="Variant.Outlined" Color="Color.Success">Create</MudButton>
        }
    </MudStack>
}
@code {

    [Parameter]
    public string Id { get; set; }
    private bool IsTextViewed { get; set; }
    private bool ShowViewTextBtn { get; set; }
    private bool ShowDeletedNotification { get; set; }
    private bool IsLoading { get; set; }

    private string ErrorMessage { get; set; } = string.Empty;

    private string Content { get; set; } = string.Empty;
    private string DateCreated { get; set; } = default;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ShowViewTextBtn = true;
        ShowDeletedNotification = false;
    }

    private void GoHome()
    {
        navigationService.NavigateTo("/");
    }

    private async Task ExecuteViewText()
    {
        ShowViewTextBtn = false;
        IsLoading = true;
        try
        {
            var messageId = Id.Substring(0, 4);
            var clientKey = Id.Substring(5, 9);
            var res = await ApiClient.GetMessageEndpointAsync(messageId);
            if (res is not null)
            {
                IsTextViewed = true;
                var key = clientKey + res.KeyIdentifier;
                var decryptedMessage = await CryptService.Decrypt(res.Content, key);
                Content = decryptedMessage;
                DateCreated = res.DateCreated.ToString("dd/MM/yyyy");
            }
            else
            {
                IsTextViewed = false;
                ShowDeletedNotification = true;
            }
        }
        catch (ApiException apiEx)
        {
            ErrorMessage = JsonConvert.DeserializeObject<ErrorResponse>(apiEx.Response).Message;
        }
        catch (Exception)
        {
            ErrorMessage = "Something wrong. Please contact administrator";
        }
        finally
        {
            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                ShowDeletedNotification = true;
            }

            IsLoading = false;
        }
    }
}
